---

- name: create tmp workspace bin
  file:
    path: "{{ workspace.path }}/bin"
    state: directory

- name: configure resources
  template:
    src: "{{ item }}"
    dest: "{{ workspace.path }}/{{ item | basename | regex_replace('\\.j2','') }}"
  with_fileglob:
    - "{{ role_path }}/templates/*.j2"

- name: check for kfctl
  stat:
    path: "{{ workspace.path }}/bin/kfctl"
  register: kfctl_exist

- name: get kfctl download url
  shell: "curl -s https://api.github.com/repos/{{ kfctl_gh_repo }}/releases/tags/{{ kfctl_version }} | jq -r .assets[].browser_download_url | grep _linux"
  when: kfctl_exist.stat.exists == False
  register: kfctl_dl_url
  environment: "{{ proxy_env }}"

- name: download kfctl
  unarchive:
    src: "{{ kfctl_dl_url.stdout }}"
    dest: "{{ workspace.path }}/bin"
    extra_opts:
      - --strip=1
    remote_src: yes
  when: kfctl_exist.stat.exists == False
  environment: "{{ proxy_env }}"

- name: create tmp app workspace
  file:
    path: "{{ workspace.path }}/app"
    state: directory

- name: download manifest repo
  get_url:
    url: "https://raw.githubusercontent.com/kubeflow/manifests/{{ manifest_version }}/kfdef/kfctl_k8s_istio.yaml"
    dest: "{{ workspace.path }}/app"

- name: patch manifest config
  blockinfile:
    path: "{{ workspace.path }}/app/kfctl_k8s_istio.yaml"
    block: |
      repos:
        - name: manifests
          uri: https://github.com/kubeflow/manifests/archive/{{ manifest_version }}.zip
      version: {{ manifest_version }}

- name: build kf app
  shell:
    cmd: "{{ workspace.path }}/bin/kfctl build -f kfctl_k8s_istio.yaml"
    chdir: "{{ workspace.path }}/app"
  retries: 5
  delay: 2
  register: kfctl_build_result
  until: kfctl_build_result is succeeded
  environment: "{{ proxy_env }}"

- name: patch argo container runtime executor
  lineinfile:
    path: "{{ workspace.path }}/app/kustomize/argo/base/params.env"
    regexp: '^containerRuntimeExecutor='
    line: 'containerRuntimeExecutor=pns'

- name: deploy kf app
  shell:
    cmd: "{{ workspace.path }}/bin/kfctl apply -f kfctl_k8s_istio.yaml"
    chdir: "{{ workspace.path }}/app"
  retries: 5
  delay: 2
  register: kfctl_apply_result
  until: kfctl_apply_result is succeeded
  environment: "{{ proxy_env }}"

- name: apply kf ingress
  shell:
    cmd: "kubectl apply -f {{ workspace.path }}"
  retries: 5
  delay: 2
  register: kubectl_ingress_result
  until: kubectl_ingress_result is succeeded
